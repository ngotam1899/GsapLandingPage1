{"ast":null,"code":"var _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = prepareDestination;\n\nvar _querystring = require(\"./querystring\");\n\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\n\nvar pathToRegexp = _interopRequireWildcard(require(\"next/dist/compiled/path-to-regexp\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction prepareDestination(destination, params, query, appendParamsToQuery, basePath) {\n  var parsedDestination = {};\n\n  if (destination.startsWith('/')) {\n    parsedDestination = (0, _parseRelativeUrl.parseRelativeUrl)(destination);\n  } else {\n    var _URL = new URL(destination),\n        pathname = _URL.pathname,\n        searchParams = _URL.searchParams,\n        hash = _URL.hash,\n        hostname = _URL.hostname,\n        port = _URL.port,\n        protocol = _URL.protocol,\n        search = _URL.search,\n        href = _URL.href;\n\n    parsedDestination = {\n      pathname: pathname,\n      searchParams: searchParams,\n      hash: hash,\n      protocol: protocol,\n      hostname: hostname,\n      port: port,\n      search: search,\n      href: href\n    };\n  }\n\n  parsedDestination.query = (0, _querystring.searchParamsToUrlQuery)(parsedDestination.searchParams);\n  var destQuery = parsedDestination.query;\n  var destPath = \"\".concat(parsedDestination.pathname).concat(parsedDestination.hash || '');\n  var destPathParamKeys = [];\n  pathToRegexp.pathToRegexp(destPath, destPathParamKeys);\n  var destPathParams = destPathParamKeys.map(function (key) {\n    return key.name;\n  });\n  var destinationCompiler = pathToRegexp.compile(destPath, // we don't validate while compiling the destination since we should\n  // have already validated before we got to this point and validating\n  // breaks compiling destinations with named pattern params from the source\n  // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n  // since compile validation is meant for reversing and not for inserting\n  // params from a separate path-regex into another\n  {\n    validate: false\n  });\n  var newUrl; // update any params in query values\n\n  for (var _i = 0, _Object$entries = Object.entries(destQuery); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        strOrArray = _Object$entries$_i[1];\n\n    var value = Array.isArray(strOrArray) ? strOrArray[0] : strOrArray;\n\n    if (value) {\n      // the value needs to start with a forward-slash to be compiled\n      // correctly\n      value = \"/\".concat(value);\n      var queryCompiler = pathToRegexp.compile(value, {\n        validate: false\n      });\n      value = queryCompiler(params).substr(1);\n    }\n\n    destQuery[key] = value;\n  } // add path params to query if it's not a redirect and not\n  // already defined in destination query or path\n\n\n  var paramKeys = Object.keys(params);\n\n  if (appendParamsToQuery && !paramKeys.some(function (key) {\n    return destPathParams.includes(key);\n  })) {\n    var _iterator = _createForOfIteratorHelper(paramKeys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _key = _step.value;\n\n        if (!(_key in destQuery)) {\n          destQuery[_key] = params[_key];\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  var shouldAddBasePath = destination.startsWith('/') && basePath;\n\n  try {\n    newUrl = \"\".concat(shouldAddBasePath ? basePath : '').concat(encodeURI(destinationCompiler(params)));\n\n    var _newUrl$split = newUrl.split('#'),\n        _newUrl$split2 = _slicedToArray(_newUrl$split, 2),\n        _pathname = _newUrl$split2[0],\n        _hash = _newUrl$split2[1];\n\n    parsedDestination.pathname = _pathname;\n    parsedDestination.hash = \"\".concat(_hash ? '#' : '').concat(_hash || '');\n    delete parsedDestination.search;\n    delete parsedDestination.searchParams;\n  } catch (err) {\n    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n      throw new Error(\"To use a multi-match in the destination you must add `*` at the end of the param name to signify it should repeat. https://err.sh/vercel/next.js/invalid-multi-match\");\n    }\n\n    throw err;\n  } // Query merge order lowest priority to highest\n  // 1. initial URL query values\n  // 2. path segment values\n  // 3. destination specified query values\n\n\n  parsedDestination.query = _objectSpread(_objectSpread({}, query), parsedDestination.query);\n  return {\n    newUrl: newUrl,\n    parsedDestination: parsedDestination\n  };\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/prepare-destination.ts"],"names":["value","paramKeys","Object","params","appendParamsToQuery","destPathParams","includes","parsedDestination","query","newUrl"],"mappings":"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","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport { searchParamsToUrlQuery } from './querystring'\nimport { parseRelativeUrl } from './parse-relative-url'\nimport * as pathToRegexp from 'next/dist/compiled/path-to-regexp'\n\ntype Params = { [param: string]: any }\n\nexport default function prepareDestination(\n  destination: string,\n  params: Params,\n  query: ParsedUrlQuery,\n  appendParamsToQuery: boolean,\n  basePath: string\n) {\n  let parsedDestination: {\n    query?: ParsedUrlQuery\n    protocol?: string\n    hostname?: string\n    port?: string\n  } & ReturnType<typeof parseRelativeUrl> = {} as any\n\n  if (destination.startsWith('/')) {\n    parsedDestination = parseRelativeUrl(destination)\n  } else {\n    const {\n      pathname,\n      searchParams,\n      hash,\n      hostname,\n      port,\n      protocol,\n      search,\n      href,\n    } = new URL(destination)\n\n    parsedDestination = {\n      pathname,\n      searchParams,\n      hash,\n      protocol,\n      hostname,\n      port,\n      search,\n      href,\n    }\n  }\n\n  parsedDestination.query = searchParamsToUrlQuery(\n    parsedDestination.searchParams\n  )\n  const destQuery = parsedDestination.query\n  const destPath = `${parsedDestination.pathname!}${\n    parsedDestination.hash || ''\n  }`\n  const destPathParamKeys: pathToRegexp.Key[] = []\n  pathToRegexp.pathToRegexp(destPath, destPathParamKeys)\n\n  const destPathParams = destPathParamKeys.map((key) => key.name)\n\n  let destinationCompiler = pathToRegexp.compile(\n    destPath,\n    // we don't validate while compiling the destination since we should\n    // have already validated before we got to this point and validating\n    // breaks compiling destinations with named pattern params from the source\n    // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n    // since compile validation is meant for reversing and not for inserting\n    // params from a separate path-regex into another\n    { validate: false }\n  )\n  let newUrl\n\n  // update any params in query values\n  for (const [key, strOrArray] of Object.entries(destQuery)) {\n    let value = Array.isArray(strOrArray) ? strOrArray[0] : strOrArray\n    if (value) {\n      // the value needs to start with a forward-slash to be compiled\n      // correctly\n      value = `/${value}`\n      const queryCompiler = pathToRegexp.compile(value, { validate: false })\n      value = queryCompiler(params).substr(1)\n    }\n    destQuery[key] = value\n  }\n\n  // add path params to query if it's not a redirect and not\n  // already defined in destination query or path\n  const paramKeys = Object.keys(params)\n\n  if (\n    appendParamsToQuery &&\n    !paramKeys.some((key) => destPathParams.includes(key))\n  ) {\n    for (const key of paramKeys) {\n      if (!(key in destQuery)) {\n        destQuery[key] = params[key]\n      }\n    }\n  }\n\n  const shouldAddBasePath = destination.startsWith('/') && basePath\n\n  try {\n    newUrl = `${shouldAddBasePath ? basePath : ''}${encodeURI(\n      destinationCompiler(params)\n    )}`\n\n    const [pathname, hash] = newUrl.split('#')\n    parsedDestination.pathname = pathname\n    parsedDestination.hash = `${hash ? '#' : ''}${hash || ''}`\n    delete parsedDestination.search\n    delete parsedDestination.searchParams\n  } catch (err) {\n    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n      throw new Error(\n        `To use a multi-match in the destination you must add \\`*\\` at the end of the param name to signify it should repeat. https://err.sh/vercel/next.js/invalid-multi-match`\n      )\n    }\n    throw err\n  }\n\n  // Query merge order lowest priority to highest\n  // 1. initial URL query values\n  // 2. path segment values\n  // 3. destination specified query values\n  parsedDestination.query = {\n    ...query,\n    ...parsedDestination.query,\n  }\n\n  return {\n    newUrl,\n    parsedDestination,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}