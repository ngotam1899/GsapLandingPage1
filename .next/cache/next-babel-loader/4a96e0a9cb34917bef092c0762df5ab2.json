{"ast":null,"code":"/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _unfetch = _interopRequireDefault(require(\"next/dist/build/polyfills/unfetch\"));\n/* eslint-disable */\n// Improved version of https://github.com/Yaffle/EventSource/\n// Available under MIT License (MIT)\n// Only tries to support IE11 and nothing below\n\n\nvar document = window.document;\nvar Response = window.Response;\nvar TextDecoder = window.TextDecoder;\nvar TextEncoder = window.TextEncoder;\nvar AbortController = window.AbortController;\n\nif (AbortController == undefined) {\n  AbortController = function AbortController() {\n    this.signal = null;\n\n    this.abort = function () {};\n  };\n}\n\nfunction TextDecoderPolyfill() {\n  this.bitsNeeded = 0;\n  this.codePoint = 0;\n}\n\n_c = TextDecoderPolyfill;\n\nTextDecoderPolyfill.prototype.decode = function (octets) {\n  function valid(codePoint, shift, octetsCount) {\n    if (octetsCount === 1) {\n      return codePoint >= 0x0080 >> shift && codePoint << shift <= 0x07ff;\n    }\n\n    if (octetsCount === 2) {\n      return codePoint >= 0x0800 >> shift && codePoint << shift <= 0xd7ff || codePoint >= 0xe000 >> shift && codePoint << shift <= 0xffff;\n    }\n\n    if (octetsCount === 3) {\n      return codePoint >= 0x010000 >> shift && codePoint << shift <= 0x10ffff;\n    }\n\n    throw new Error();\n  }\n\n  function octetsCount(bitsNeeded, codePoint) {\n    if (bitsNeeded === 6 * 1) {\n      return codePoint >> 6 > 15 ? 3 : codePoint > 31 ? 2 : 1;\n    }\n\n    if (bitsNeeded === 6 * 2) {\n      return codePoint > 15 ? 3 : 2;\n    }\n\n    if (bitsNeeded === 6 * 3) {\n      return 3;\n    }\n\n    throw new Error();\n  }\n\n  var REPLACER = 0xfffd;\n  var string = '';\n  var bitsNeeded = this.bitsNeeded;\n  var codePoint = this.codePoint;\n\n  for (var i = 0; i < octets.length; i += 1) {\n    var octet = octets[i];\n\n    if (bitsNeeded !== 0) {\n      if (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n        string += String.fromCharCode(codePoint);\n      }\n    }\n\n    if (bitsNeeded === 0) {\n      if (octet >= 0 && octet <= 127) {\n        bitsNeeded = 0;\n        codePoint = octet;\n      } else if (octet >= 192 && octet <= 223) {\n        bitsNeeded = 6 * 1;\n        codePoint = octet & 31;\n      } else if (octet >= 224 && octet <= 239) {\n        bitsNeeded = 6 * 2;\n        codePoint = octet & 15;\n      } else if (octet >= 240 && octet <= 247) {\n        bitsNeeded = 6 * 3;\n        codePoint = octet & 7;\n      } else {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n      }\n\n      if (bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint))) {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n      }\n    } else {\n      bitsNeeded -= 6;\n      codePoint = codePoint << 6 | octet & 63;\n    }\n\n    if (bitsNeeded === 0) {\n      if (codePoint <= 0xffff) {\n        string += String.fromCharCode(codePoint);\n      } else {\n        string += String.fromCharCode(0xd800 + (codePoint - 0xffff - 1 >> 10));\n        string += String.fromCharCode(0xdc00 + (codePoint - 0xffff - 1 & 0x3ff));\n      }\n    }\n  }\n\n  this.bitsNeeded = bitsNeeded;\n  this.codePoint = codePoint;\n  return string;\n}; // Firefox < 38 throws an error with stream option\n\n\nvar supportsStreamOption = function supportsStreamOption() {\n  try {\n    return new TextDecoder().decode(new TextEncoder().encode('test'), {\n      stream: true\n    }) === 'test';\n  } catch (error) {\n    console.log(error);\n  }\n\n  return false;\n}; // IE, Edge\n\n\nif (TextDecoder == undefined || TextEncoder == undefined || !supportsStreamOption()) {\n  TextDecoder = TextDecoderPolyfill;\n}\n\nvar k = function k() {};\n\nfunction XHRWrapper(xhr) {\n  this.withCredentials = false;\n  this.responseType = '';\n  this.readyState = 0;\n  this.status = 0;\n  this.statusText = '';\n  this.responseText = '';\n  this.onprogress = k;\n  this.onreadystatechange = k;\n  this._contentType = '';\n  this._xhr = xhr;\n  this._sendTimeout = 0;\n  this._abort = k;\n}\n\n_c2 = XHRWrapper;\n\nXHRWrapper.prototype.open = function (method, url) {\n  this._abort(true);\n\n  var that = this;\n  var xhr = this._xhr;\n  var state = 1;\n  var timeout = 0;\n\n  this._abort = function (silent) {\n    if (that._sendTimeout !== 0) {\n      clearTimeout(that._sendTimeout);\n      that._sendTimeout = 0;\n    }\n\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4;\n      xhr.onload = k;\n      xhr.onerror = k;\n      xhr.onabort = k;\n      xhr.onprogress = k;\n      xhr.onreadystatechange = k; // IE 8 - 9: XDomainRequest#abort() does not fire any event\n      // Opera < 10: XMLHttpRequest#abort() does not fire any event\n\n      xhr.abort();\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      if (!silent) {\n        that.readyState = 4;\n        that.onreadystatechange();\n      }\n    }\n\n    state = 0;\n  };\n\n  var onStart = function onStart() {\n    if (state === 1) {\n      // state = 2;\n      var status = 0;\n      var statusText = '';\n      var contentType = undefined;\n\n      if (!('contentType' in xhr)) {\n        try {\n          status = xhr.status;\n          statusText = xhr.statusText;\n          contentType = xhr.getResponseHeader('Content-Type');\n        } catch (error) {\n          // IE < 10 throws exception for `xhr.status` when xhr.readyState === 2 || xhr.readyState === 3\n          // Opera < 11 throws exception for `xhr.status` when xhr.readyState === 2\n          // https://bugs.webkit.org/show_bug.cgi?id=29121\n          status = 0;\n          statusText = '';\n          contentType = undefined; // Firefox < 14, Chrome ?, Safari ?\n          // https://bugs.webkit.org/show_bug.cgi?id=29658\n          // https://bugs.webkit.org/show_bug.cgi?id=77854\n        }\n      } else {\n        status = 200;\n        statusText = 'OK';\n        contentType = xhr.contentType;\n      }\n\n      if (status !== 0) {\n        state = 2;\n        that.readyState = 2;\n        that.status = status;\n        that.statusText = statusText;\n        that._contentType = contentType;\n        that.onreadystatechange();\n      }\n    }\n  };\n\n  var onProgress = function onProgress() {\n    onStart();\n\n    if (state === 2 || state === 3) {\n      state = 3;\n      var responseText = '';\n\n      try {\n        responseText = xhr.responseText;\n      } catch (error) {// IE 8 - 9 with XMLHttpRequest\n      }\n\n      that.readyState = 3;\n      that.responseText = responseText;\n      that.onprogress();\n    }\n  };\n\n  var onFinish = function onFinish() {\n    // Firefox 52 fires \"readystatechange\" (xhr.readyState === 4) without final \"readystatechange\" (xhr.readyState === 3)\n    // IE 8 fires \"onload\" without \"onprogress\"\n    onProgress();\n\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4;\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      that.readyState = 4;\n      that.onreadystatechange();\n    }\n  };\n\n  var onReadyStateChange = function onReadyStateChange() {\n    if (xhr != undefined) {\n      // Opera 12\n      if (xhr.readyState === 4) {\n        onFinish();\n      } else if (xhr.readyState === 3) {\n        onProgress();\n      } else if (xhr.readyState === 2) {\n        onStart();\n      }\n    }\n  };\n\n  var onTimeout = function onTimeout() {\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, 500);\n\n    if (xhr.readyState === 3) {\n      onProgress();\n    }\n  }; // XDomainRequest#abort removes onprogress, onerror, onload\n\n\n  xhr.onload = onFinish;\n  xhr.onerror = onFinish; // improper fix to match Firefox behavior, but it is better than just ignore abort\n  // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n  // https://code.google.com/p/chromium/issues/detail?id=153570\n  // IE 8 fires \"onload\" without \"onprogress\n\n  xhr.onabort = onFinish; // https://bugzilla.mozilla.org/show_bug.cgi?id=736723\n\n  if (!('sendAsBinary' in XMLHttpRequest.prototype) && !('mozAnon' in XMLHttpRequest.prototype)) {\n    xhr.onprogress = onProgress;\n  } // IE 8 - 9 (XMLHTTPRequest)\n  // Opera < 12\n  // Firefox < 3.5\n  // Firefox 3.5 - 3.6 - ? < 9.0\n  // onprogress is not fired sometimes or delayed\n  // see also #64\n\n\n  xhr.onreadystatechange = onReadyStateChange;\n\n  if ('contentType' in xhr) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + 'padding=true';\n  }\n\n  xhr.open(method, url, true);\n\n  if ('readyState' in xhr) {\n    // workaround for Opera 12 issue with \"progress\" events\n    // #91\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, 0);\n  }\n};\n\nXHRWrapper.prototype.abort = function () {\n  this._abort(false);\n};\n\nXHRWrapper.prototype.getResponseHeader = function (name) {\n  return this._contentType;\n};\n\nXHRWrapper.prototype.setRequestHeader = function (name, value) {\n  var xhr = this._xhr;\n\n  if ('setRequestHeader' in xhr) {\n    xhr.setRequestHeader(name, value);\n  }\n};\n\nXHRWrapper.prototype.getAllResponseHeaders = function () {\n  return this._xhr.getAllResponseHeaders != undefined ? this._xhr.getAllResponseHeaders() : '';\n};\n\nXHRWrapper.prototype.send = function () {\n  // loading indicator in Safari < ? (6), Chrome < 14, Firefox\n  if (!('ontimeout' in XMLHttpRequest.prototype) && document != undefined && document.readyState != undefined && document.readyState !== 'complete') {\n    var that = this;\n    that._sendTimeout = setTimeout(function () {\n      that._sendTimeout = 0;\n      that.send();\n    }, 4);\n    return;\n  }\n\n  var xhr = this._xhr; // withCredentials should be set after \"open\" for Safari and Chrome (< 19 ?)\n\n  xhr.withCredentials = this.withCredentials;\n  xhr.responseType = this.responseType;\n\n  try {\n    // xhr.send(); throws \"Not enough arguments\" in Firefox 3.0\n    xhr.send(undefined);\n  } catch (error1) {\n    // Safari 5.1.7, Opera 12\n    throw error1;\n  }\n};\n\nfunction toLowerCase(name) {\n  return name.replace(/[A-Z]/g, function (c) {\n    return String.fromCharCode(c.charCodeAt(0) + 0x20);\n  });\n}\n\nfunction HeadersPolyfill(all) {\n  // Get headers: implemented according to mozilla's example code: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#Example\n  var map = Object.create(null);\n  var array = all.split('\\r\\n');\n\n  for (var i = 0; i < array.length; i += 1) {\n    var line = array[i];\n    var parts = line.split(': ');\n    var name = parts.shift();\n    var value = parts.join(': ');\n    map[toLowerCase(name)] = value;\n  }\n\n  this._map = map;\n}\n\n_c3 = HeadersPolyfill;\n\nHeadersPolyfill.prototype.get = function (name) {\n  return this._map[toLowerCase(name)];\n};\n\nfunction XHRTransport() {}\n\n_c4 = XHRTransport;\n\nXHRTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\n  xhr.open('GET', url);\n  var offset = 0;\n\n  xhr.onprogress = function () {\n    var responseText = xhr.responseText;\n    var chunk = responseText.slice(offset);\n    offset += chunk.length;\n    onProgressCallback(chunk);\n  };\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 2) {\n      var status = xhr.status;\n      var statusText = xhr.statusText;\n      var contentType = xhr.getResponseHeader('Content-Type');\n      var headers = xhr.getAllResponseHeaders();\n      onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers), function () {\n        xhr.abort();\n      });\n    } else if (xhr.readyState === 4) {\n      onFinishCallback();\n    }\n  };\n\n  xhr.withCredentials = withCredentials;\n  xhr.responseType = 'text';\n\n  for (var name in headers) {\n    if (Object.prototype.hasOwnProperty.call(headers, name)) {\n      xhr.setRequestHeader(name, headers[name]);\n    }\n  }\n\n  xhr.send();\n};\n\nfunction HeadersWrapper(headers) {\n  this._headers = headers;\n}\n\n_c5 = HeadersWrapper;\n\nHeadersWrapper.prototype.get = function (name) {\n  return this._headers.get(name);\n};\n\nfunction FetchTransport() {}\n\n_c6 = FetchTransport;\n\nFetchTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\n  var controller = new AbortController();\n  var signal = controller.signal; // see #120\n\n  var textDecoder = new TextDecoder();\n  (0, _unfetch[\"default\"])(url, {\n    headers: headers,\n    credentials: withCredentials ? 'include' : 'same-origin',\n    signal: signal,\n    cache: 'no-store'\n  }).then(function (response) {\n    var reader = response.body.getReader();\n    onStartCallback(response.status, response.statusText, response.headers.get('Content-Type'), new HeadersWrapper(response.headers), function () {\n      controller.abort();\n      reader.cancel();\n    });\n    return new Promise(function (resolve, reject) {\n      var readNextChunk = function readNextChunk() {\n        reader.read().then(function (result) {\n          if (result.done) {\n            // Note: bytes in textDecoder are ignored\n            resolve(undefined);\n          } else {\n            var chunk = textDecoder.decode(result.value, {\n              stream: true\n            });\n            onProgressCallback(chunk);\n            readNextChunk();\n          }\n        })['catch'](function (error) {\n          reject(error);\n        });\n      };\n\n      readNextChunk();\n    });\n  }).then(function (result) {\n    onFinishCallback();\n    return result;\n  }, function (error) {\n    onFinishCallback();\n    return Promise.reject(error);\n  });\n};\n\nfunction EventTarget() {\n  this._listeners = Object.create(null);\n}\n\n_c7 = EventTarget;\n\nfunction throwError(e) {\n  setTimeout(function () {\n    throw e;\n  }, 0);\n}\n\nEventTarget.prototype.dispatchEvent = function (event) {\n  event.target = this;\n  var typeListeners = this._listeners[event.type];\n\n  if (typeListeners != undefined) {\n    var length = typeListeners.length;\n\n    for (var i = 0; i < length; i += 1) {\n      var listener = typeListeners[i];\n\n      try {\n        if (typeof listener.handleEvent === 'function') {\n          listener.handleEvent(event);\n        } else {\n          listener.call(this, event);\n        }\n      } catch (e) {\n        throwError(e);\n      }\n    }\n  }\n};\n\nEventTarget.prototype.addEventListener = function (type, listener) {\n  type = String(type);\n  var listeners = this._listeners;\n  var typeListeners = listeners[type];\n\n  if (typeListeners == undefined) {\n    typeListeners = [];\n    listeners[type] = typeListeners;\n  }\n\n  var found = false;\n\n  for (var i = 0; i < typeListeners.length; i += 1) {\n    if (typeListeners[i] === listener) {\n      found = true;\n    }\n  }\n\n  if (!found) {\n    typeListeners.push(listener);\n  }\n};\n\nEventTarget.prototype.removeEventListener = function (type, listener) {\n  type = String(type);\n  var listeners = this._listeners;\n  var typeListeners = listeners[type];\n\n  if (typeListeners != undefined) {\n    var filtered = [];\n\n    for (var i = 0; i < typeListeners.length; i += 1) {\n      if (typeListeners[i] !== listener) {\n        filtered.push(typeListeners[i]);\n      }\n    }\n\n    if (filtered.length === 0) {\n      delete listeners[type];\n    } else {\n      listeners[type] = filtered;\n    }\n  }\n};\n\nfunction Event(type) {\n  this.type = type;\n  this.target = undefined;\n}\n\n_c8 = Event;\n\nfunction MessageEvent(type, options) {\n  Event.call(this, type);\n  this.data = options.data;\n  this.lastEventId = options.lastEventId;\n}\n\n_c9 = MessageEvent;\nMessageEvent.prototype = Object.create(Event.prototype);\n\nfunction ConnectionEvent(type, options) {\n  Event.call(this, type);\n  this.status = options.status;\n  this.statusText = options.statusText;\n  this.headers = options.headers;\n}\n\n_c10 = ConnectionEvent;\nConnectionEvent.prototype = Object.create(Event.prototype);\nvar WAITING = -1;\nvar CONNECTING = 0;\nvar OPEN = 1;\nvar CLOSED = 2;\nvar AFTER_CR = -1;\nvar FIELD_START = 0;\nvar FIELD = 1;\nvar VALUE_START = 2;\nvar VALUE = 3;\nvar contentTypeRegExp = /^text\\/event\\-stream;?(\\s*charset\\=utf\\-8)?$/i;\nvar MINIMUM_DURATION = 1000;\nvar MAXIMUM_DURATION = 18000000;\n\nvar parseDuration = function parseDuration(value, def) {\n  var n = parseInt(value, 10);\n\n  if (n !== n) {\n    n = def;\n  }\n\n  return clampDuration(n);\n};\n\nvar clampDuration = function clampDuration(n) {\n  return Math.min(Math.max(n, MINIMUM_DURATION), MAXIMUM_DURATION);\n};\n\nvar fire = function fire(that, f, event) {\n  try {\n    if (typeof f === 'function') {\n      f.call(that, event);\n    }\n  } catch (e) {\n    throwError(e);\n  }\n};\n\nfunction EventSourcePolyfill(url, options) {\n  EventTarget.call(this);\n  this.onopen = undefined;\n  this.onmessage = undefined;\n  this.onerror = undefined;\n  this.url = undefined;\n  this.readyState = undefined;\n  this.withCredentials = undefined;\n  this._close = undefined;\n  start(this, url, options);\n}\n\n_c11 = EventSourcePolyfill;\nvar isFetchSupported = _unfetch[\"default\"] != undefined && Response != undefined && 'body' in Response.prototype;\n\nfunction start(es, url, options) {\n  url = String(url);\n  var withCredentials = options != undefined && Boolean(options.withCredentials);\n  var initialRetry = clampDuration(1000);\n  var heartbeatTimeout = options != undefined && options.heartbeatTimeout != undefined ? parseDuration(options.heartbeatTimeout, 45000) : clampDuration(45000);\n  var lastEventId = '';\n  var retry = initialRetry;\n  var wasActivity = false;\n  var headers = options != undefined && options.headers != undefined ? JSON.parse(JSON.stringify(options.headers)) : undefined;\n  var CurrentTransport = options != undefined && options.Transport != undefined ? options.Transport : XMLHttpRequest;\n  var xhr = isFetchSupported && !(options != undefined && options.Transport != undefined) ? undefined : new XHRWrapper(new CurrentTransport());\n  var transport = xhr == undefined ? new FetchTransport() : new XHRTransport();\n  var cancelFunction = undefined;\n  var timeout = 0;\n  var currentState = WAITING;\n  var dataBuffer = '';\n  var lastEventIdBuffer = '';\n  var eventTypeBuffer = '';\n  var textBuffer = '';\n  var state = FIELD_START;\n  var fieldStart = 0;\n  var valueStart = 0;\n\n  var onStart = function onStart(status, statusText, contentType, headers, cancel) {\n    if (currentState === CONNECTING) {\n      cancelFunction = cancel;\n\n      if (status === 200 && contentType != undefined && contentTypeRegExp.test(contentType)) {\n        currentState = OPEN;\n        wasActivity = true;\n        retry = initialRetry;\n        es.readyState = OPEN;\n        var event = new ConnectionEvent('open', {\n          status: status,\n          statusText: statusText,\n          headers: headers\n        });\n        es.dispatchEvent(event);\n        fire(es, es.onopen, event);\n      } else {\n        var message = '';\n\n        if (status !== 200) {\n          if (statusText) {\n            statusText = statusText.replace(/\\s+/g, ' ');\n          }\n\n          message = \"EventSource's response has a status \" + status + ' ' + statusText + ' that is not 200. Aborting the connection.';\n        } else {\n          message = \"EventSource's response has a Content-Type specifying an unsupported type: \" + (contentType == undefined ? '-' : contentType.replace(/\\s+/g, ' ')) + '. Aborting the connection.';\n        }\n\n        throwError(new Error(message));\n        close();\n        var event = new ConnectionEvent('error', {\n          status: status,\n          statusText: statusText,\n          headers: headers\n        });\n        es.dispatchEvent(event);\n        fire(es, es.onerror, event);\n      }\n    }\n  };\n\n  var onProgress = function onProgress(textChunk) {\n    if (currentState === OPEN) {\n      var n = -1;\n\n      for (var i = 0; i < textChunk.length; i += 1) {\n        var c = textChunk.charCodeAt(i);\n\n        if (c === '\\n'.charCodeAt(0) || c === '\\r'.charCodeAt(0)) {\n          n = i;\n        }\n      }\n\n      var chunk = (n !== -1 ? textBuffer : '') + textChunk.slice(0, n + 1);\n      textBuffer = (n === -1 ? textBuffer : '') + textChunk.slice(n + 1);\n\n      if (chunk !== '') {\n        wasActivity = true;\n      }\n\n      for (var position = 0; position < chunk.length; position += 1) {\n        var c = chunk.charCodeAt(position);\n\n        if (state === AFTER_CR && c === '\\n'.charCodeAt(0)) {\n          state = FIELD_START;\n        } else {\n          if (state === AFTER_CR) {\n            state = FIELD_START;\n          }\n\n          if (c === '\\r'.charCodeAt(0) || c === '\\n'.charCodeAt(0)) {\n            if (state !== FIELD_START) {\n              if (state === FIELD) {\n                valueStart = position + 1;\n              }\n\n              var field = chunk.slice(fieldStart, valueStart - 1);\n              var value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === ' '.charCodeAt(0) ? 1 : 0), position);\n\n              if (field === 'data') {\n                dataBuffer += '\\n';\n                dataBuffer += value;\n              } else if (field === 'id') {\n                lastEventIdBuffer = value;\n              } else if (field === 'event') {\n                eventTypeBuffer = value;\n              } else if (field === 'retry') {\n                initialRetry = parseDuration(value, initialRetry);\n                retry = initialRetry;\n              } else if (field === 'heartbeatTimeout') {\n                heartbeatTimeout = parseDuration(value, heartbeatTimeout);\n\n                if (timeout !== 0) {\n                  clearTimeout(timeout);\n                  timeout = setTimeout(function () {\n                    onTimeout();\n                  }, heartbeatTimeout);\n                }\n              }\n            }\n\n            if (state === FIELD_START) {\n              if (dataBuffer !== '') {\n                lastEventId = lastEventIdBuffer;\n\n                if (eventTypeBuffer === '') {\n                  eventTypeBuffer = 'message';\n                }\n\n                var event = new MessageEvent(eventTypeBuffer, {\n                  data: dataBuffer.slice(1),\n                  lastEventId: lastEventIdBuffer\n                });\n                es.dispatchEvent(event);\n\n                if (eventTypeBuffer === 'message') {\n                  fire(es, es.onmessage, event);\n                }\n\n                if (currentState === CLOSED) {\n                  return;\n                }\n              }\n\n              dataBuffer = '';\n              eventTypeBuffer = '';\n            }\n\n            state = c === '\\r'.charCodeAt(0) ? AFTER_CR : FIELD_START;\n          } else {\n            if (state === FIELD_START) {\n              fieldStart = position;\n              state = FIELD;\n            }\n\n            if (state === FIELD) {\n              if (c === ':'.charCodeAt(0)) {\n                valueStart = position + 1;\n                state = VALUE_START;\n              }\n            } else if (state === VALUE_START) {\n              state = VALUE;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  var onFinish = function onFinish() {\n    if (currentState === OPEN || currentState === CONNECTING) {\n      currentState = WAITING;\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      timeout = setTimeout(function () {\n        onTimeout();\n      }, retry);\n      retry = clampDuration(Math.min(initialRetry * 16, retry * 2));\n      es.readyState = CONNECTING;\n      var event = new Event('error');\n      es.dispatchEvent(event);\n      fire(es, es.onerror, event);\n    }\n  };\n\n  var close = function close() {\n    currentState = CLOSED;\n\n    if (cancelFunction != undefined) {\n      cancelFunction();\n      cancelFunction = undefined;\n    }\n\n    if (timeout !== 0) {\n      clearTimeout(timeout);\n      timeout = 0;\n    }\n\n    es.readyState = CLOSED;\n  };\n\n  var onTimeout = function onTimeout() {\n    timeout = 0;\n\n    if (currentState !== WAITING) {\n      if (!wasActivity && cancelFunction != undefined) {\n        throwError(new Error('No activity within ' + heartbeatTimeout + ' milliseconds. Reconnecting.'));\n        cancelFunction();\n        cancelFunction = undefined;\n      } else {\n        wasActivity = false;\n        timeout = setTimeout(function () {\n          onTimeout();\n        }, heartbeatTimeout);\n      }\n\n      return;\n    }\n\n    wasActivity = false;\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, heartbeatTimeout);\n    currentState = CONNECTING;\n    dataBuffer = '';\n    eventTypeBuffer = '';\n    lastEventIdBuffer = lastEventId;\n    textBuffer = '';\n    fieldStart = 0;\n    valueStart = 0;\n    state = FIELD_START; // https://bugzilla.mozilla.org/show_bug.cgi?id=428916\n    // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.\n\n    var requestURL = url;\n\n    if (url.slice(0, 5) !== 'data:' && url.slice(0, 5) !== 'blob:') {\n      if (lastEventId !== '') {\n        requestURL += (url.indexOf('?') === -1 ? '?' : '&') + 'lastEventId=' + encodeURIComponent(lastEventId);\n      }\n    }\n\n    var requestHeaders = {};\n    requestHeaders['Accept'] = 'text/event-stream';\n\n    if (headers != undefined) {\n      for (var name in headers) {\n        if (Object.prototype.hasOwnProperty.call(headers, name)) {\n          requestHeaders[name] = headers[name];\n        }\n      }\n    }\n\n    try {\n      transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials, requestHeaders);\n    } catch (error) {\n      close();\n      throw error;\n    }\n  };\n\n  es.url = url;\n  es.readyState = CONNECTING;\n  es.withCredentials = withCredentials;\n  es._close = close;\n  onTimeout();\n}\n\nEventSourcePolyfill.prototype = Object.create(EventTarget.prototype);\nEventSourcePolyfill.prototype.CONNECTING = CONNECTING;\nEventSourcePolyfill.prototype.OPEN = OPEN;\nEventSourcePolyfill.prototype.CLOSED = CLOSED;\n\nEventSourcePolyfill.prototype.close = function () {\n  this._close();\n};\n\nEventSourcePolyfill.CONNECTING = CONNECTING;\nEventSourcePolyfill.OPEN = OPEN;\nEventSourcePolyfill.CLOSED = CLOSED;\nEventSourcePolyfill.prototype.withCredentials = undefined;\nvar _default = EventSourcePolyfill;\nexports[\"default\"] = _default;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n\n$RefreshReg$(_c, \"TextDecoderPolyfill\");\n$RefreshReg$(_c2, \"XHRWrapper\");\n$RefreshReg$(_c3, \"HeadersPolyfill\");\n$RefreshReg$(_c4, \"XHRTransport\");\n$RefreshReg$(_c5, \"HeadersWrapper\");\n$RefreshReg$(_c6, \"FetchTransport\");\n$RefreshReg$(_c7, \"EventTarget\");\n$RefreshReg$(_c8, \"Event\");\n$RefreshReg$(_c9, \"MessageEvent\");\n$RefreshReg$(_c10, \"ConnectionEvent\");\n$RefreshReg$(_c11, \"EventSourcePolyfill\");","map":{"version":3,"sources":["../../../client/dev/event-source-polyfill.js"],"names":["supportsStreamOption","TextEncoder","stream","console","error","xhr","timeout","clearTimeout","that","readyState","onreadystatechange","onStart","statusText","contentType","status","getResponseHeader","undefined","responseText","onFinish","onProgress","onTimeout","setTimeout","onload","responseType","error1","toLowerCase","name","replace","String","fromCharCode","c","charCodeAt","HeadersPolyfill","all","map","array","line","parts","shift","value","join","_map","prototype","textDecoder","TextDecoder","credentials","resolve","requestURL","url","lastEventId","indexOf","encodeURIComponent","requestHeaders","headers","Object","hasOwnProperty","transport","withCredentials","close","es","CONNECTING","_close","EventSourcePolyfill","EventTarget","CLOSED"],"mappings":"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","sourcesContent":["/* eslint-disable */\n// Improved version of https://github.com/Yaffle/EventSource/\n// Available under MIT License (MIT)\n// Only tries to support IE11 and nothing below\nimport fetch from 'next/dist/build/polyfills/unfetch'\n\nvar document = window.document\nvar Response = window.Response\nvar TextDecoder = window.TextDecoder\nvar TextEncoder = window.TextEncoder\nvar AbortController = window.AbortController\n\nif (AbortController == undefined) {\n  AbortController = function () {\n    this.signal = null\n    this.abort = function () {}\n  }\n}\n\nfunction TextDecoderPolyfill() {\n  this.bitsNeeded = 0\n  this.codePoint = 0\n}\n\nTextDecoderPolyfill.prototype.decode = function (octets) {\n  function valid(codePoint, shift, octetsCount) {\n    if (octetsCount === 1) {\n      return codePoint >= 0x0080 >> shift && codePoint << shift <= 0x07ff\n    }\n    if (octetsCount === 2) {\n      return (\n        (codePoint >= 0x0800 >> shift && codePoint << shift <= 0xd7ff) ||\n        (codePoint >= 0xe000 >> shift && codePoint << shift <= 0xffff)\n      )\n    }\n    if (octetsCount === 3) {\n      return codePoint >= 0x010000 >> shift && codePoint << shift <= 0x10ffff\n    }\n    throw new Error()\n  }\n  function octetsCount(bitsNeeded, codePoint) {\n    if (bitsNeeded === 6 * 1) {\n      return codePoint >> 6 > 15 ? 3 : codePoint > 31 ? 2 : 1\n    }\n    if (bitsNeeded === 6 * 2) {\n      return codePoint > 15 ? 3 : 2\n    }\n    if (bitsNeeded === 6 * 3) {\n      return 3\n    }\n    throw new Error()\n  }\n  var REPLACER = 0xfffd\n  var string = ''\n  var bitsNeeded = this.bitsNeeded\n  var codePoint = this.codePoint\n  for (var i = 0; i < octets.length; i += 1) {\n    var octet = octets[i]\n    if (bitsNeeded !== 0) {\n      if (\n        octet < 128 ||\n        octet > 191 ||\n        !valid(\n          (codePoint << 6) | (octet & 63),\n          bitsNeeded - 6,\n          octetsCount(bitsNeeded, codePoint)\n        )\n      ) {\n        bitsNeeded = 0\n        codePoint = REPLACER\n        string += String.fromCharCode(codePoint)\n      }\n    }\n    if (bitsNeeded === 0) {\n      if (octet >= 0 && octet <= 127) {\n        bitsNeeded = 0\n        codePoint = octet\n      } else if (octet >= 192 && octet <= 223) {\n        bitsNeeded = 6 * 1\n        codePoint = octet & 31\n      } else if (octet >= 224 && octet <= 239) {\n        bitsNeeded = 6 * 2\n        codePoint = octet & 15\n      } else if (octet >= 240 && octet <= 247) {\n        bitsNeeded = 6 * 3\n        codePoint = octet & 7\n      } else {\n        bitsNeeded = 0\n        codePoint = REPLACER\n      }\n      if (\n        bitsNeeded !== 0 &&\n        !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint))\n      ) {\n        bitsNeeded = 0\n        codePoint = REPLACER\n      }\n    } else {\n      bitsNeeded -= 6\n      codePoint = (codePoint << 6) | (octet & 63)\n    }\n    if (bitsNeeded === 0) {\n      if (codePoint <= 0xffff) {\n        string += String.fromCharCode(codePoint)\n      } else {\n        string += String.fromCharCode(0xd800 + ((codePoint - 0xffff - 1) >> 10))\n        string += String.fromCharCode(\n          0xdc00 + ((codePoint - 0xffff - 1) & 0x3ff)\n        )\n      }\n    }\n  }\n  this.bitsNeeded = bitsNeeded\n  this.codePoint = codePoint\n  return string\n}\n\n// Firefox < 38 throws an error with stream option\nvar supportsStreamOption = function () {\n  try {\n    return (\n      new TextDecoder().decode(new TextEncoder().encode('test'), {\n        stream: true,\n      }) === 'test'\n    )\n  } catch (error) {\n    console.log(error)\n  }\n  return false\n}\n\n// IE, Edge\nif (\n  TextDecoder == undefined ||\n  TextEncoder == undefined ||\n  !supportsStreamOption()\n) {\n  TextDecoder = TextDecoderPolyfill\n}\n\nvar k = function () {}\n\nfunction XHRWrapper(xhr) {\n  this.withCredentials = false\n  this.responseType = ''\n  this.readyState = 0\n  this.status = 0\n  this.statusText = ''\n  this.responseText = ''\n  this.onprogress = k\n  this.onreadystatechange = k\n  this._contentType = ''\n  this._xhr = xhr\n  this._sendTimeout = 0\n  this._abort = k\n}\n\nXHRWrapper.prototype.open = function (method, url) {\n  this._abort(true)\n\n  var that = this\n  var xhr = this._xhr\n  var state = 1\n  var timeout = 0\n\n  this._abort = function (silent) {\n    if (that._sendTimeout !== 0) {\n      clearTimeout(that._sendTimeout)\n      that._sendTimeout = 0\n    }\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4\n      xhr.onload = k\n      xhr.onerror = k\n      xhr.onabort = k\n      xhr.onprogress = k\n      xhr.onreadystatechange = k\n      // IE 8 - 9: XDomainRequest#abort() does not fire any event\n      // Opera < 10: XMLHttpRequest#abort() does not fire any event\n      xhr.abort()\n      if (timeout !== 0) {\n        clearTimeout(timeout)\n        timeout = 0\n      }\n      if (!silent) {\n        that.readyState = 4\n        that.onreadystatechange()\n      }\n    }\n    state = 0\n  }\n\n  var onStart = function () {\n    if (state === 1) {\n      // state = 2;\n      var status = 0\n      var statusText = ''\n      var contentType = undefined\n      if (!('contentType' in xhr)) {\n        try {\n          status = xhr.status\n          statusText = xhr.statusText\n          contentType = xhr.getResponseHeader('Content-Type')\n        } catch (error) {\n          // IE < 10 throws exception for `xhr.status` when xhr.readyState === 2 || xhr.readyState === 3\n          // Opera < 11 throws exception for `xhr.status` when xhr.readyState === 2\n          // https://bugs.webkit.org/show_bug.cgi?id=29121\n          status = 0\n          statusText = ''\n          contentType = undefined\n          // Firefox < 14, Chrome ?, Safari ?\n          // https://bugs.webkit.org/show_bug.cgi?id=29658\n          // https://bugs.webkit.org/show_bug.cgi?id=77854\n        }\n      } else {\n        status = 200\n        statusText = 'OK'\n        contentType = xhr.contentType\n      }\n      if (status !== 0) {\n        state = 2\n        that.readyState = 2\n        that.status = status\n        that.statusText = statusText\n        that._contentType = contentType\n        that.onreadystatechange()\n      }\n    }\n  }\n  var onProgress = function () {\n    onStart()\n    if (state === 2 || state === 3) {\n      state = 3\n      var responseText = ''\n      try {\n        responseText = xhr.responseText\n      } catch (error) {\n        // IE 8 - 9 with XMLHttpRequest\n      }\n      that.readyState = 3\n      that.responseText = responseText\n      that.onprogress()\n    }\n  }\n  var onFinish = function () {\n    // Firefox 52 fires \"readystatechange\" (xhr.readyState === 4) without final \"readystatechange\" (xhr.readyState === 3)\n    // IE 8 fires \"onload\" without \"onprogress\"\n    onProgress()\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4\n      if (timeout !== 0) {\n        clearTimeout(timeout)\n        timeout = 0\n      }\n      that.readyState = 4\n      that.onreadystatechange()\n    }\n  }\n  var onReadyStateChange = function () {\n    if (xhr != undefined) {\n      // Opera 12\n      if (xhr.readyState === 4) {\n        onFinish()\n      } else if (xhr.readyState === 3) {\n        onProgress()\n      } else if (xhr.readyState === 2) {\n        onStart()\n      }\n    }\n  }\n  var onTimeout = function () {\n    timeout = setTimeout(function () {\n      onTimeout()\n    }, 500)\n    if (xhr.readyState === 3) {\n      onProgress()\n    }\n  }\n\n  // XDomainRequest#abort removes onprogress, onerror, onload\n  xhr.onload = onFinish\n  xhr.onerror = onFinish\n  // improper fix to match Firefox behavior, but it is better than just ignore abort\n  // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n  // https://code.google.com/p/chromium/issues/detail?id=153570\n  // IE 8 fires \"onload\" without \"onprogress\n  xhr.onabort = onFinish\n\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=736723\n  if (\n    !('sendAsBinary' in XMLHttpRequest.prototype) &&\n    !('mozAnon' in XMLHttpRequest.prototype)\n  ) {\n    xhr.onprogress = onProgress\n  }\n\n  // IE 8 - 9 (XMLHTTPRequest)\n  // Opera < 12\n  // Firefox < 3.5\n  // Firefox 3.5 - 3.6 - ? < 9.0\n  // onprogress is not fired sometimes or delayed\n  // see also #64\n  xhr.onreadystatechange = onReadyStateChange\n\n  if ('contentType' in xhr) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + 'padding=true'\n  }\n  xhr.open(method, url, true)\n\n  if ('readyState' in xhr) {\n    // workaround for Opera 12 issue with \"progress\" events\n    // #91\n    timeout = setTimeout(function () {\n      onTimeout()\n    }, 0)\n  }\n}\nXHRWrapper.prototype.abort = function () {\n  this._abort(false)\n}\nXHRWrapper.prototype.getResponseHeader = function (name) {\n  return this._contentType\n}\nXHRWrapper.prototype.setRequestHeader = function (name, value) {\n  var xhr = this._xhr\n  if ('setRequestHeader' in xhr) {\n    xhr.setRequestHeader(name, value)\n  }\n}\nXHRWrapper.prototype.getAllResponseHeaders = function () {\n  return this._xhr.getAllResponseHeaders != undefined\n    ? this._xhr.getAllResponseHeaders()\n    : ''\n}\nXHRWrapper.prototype.send = function () {\n  // loading indicator in Safari < ? (6), Chrome < 14, Firefox\n  if (\n    !('ontimeout' in XMLHttpRequest.prototype) &&\n    document != undefined &&\n    document.readyState != undefined &&\n    document.readyState !== 'complete'\n  ) {\n    var that = this\n    that._sendTimeout = setTimeout(function () {\n      that._sendTimeout = 0\n      that.send()\n    }, 4)\n    return\n  }\n\n  var xhr = this._xhr\n  // withCredentials should be set after \"open\" for Safari and Chrome (< 19 ?)\n  xhr.withCredentials = this.withCredentials\n  xhr.responseType = this.responseType\n  try {\n    // xhr.send(); throws \"Not enough arguments\" in Firefox 3.0\n    xhr.send(undefined)\n  } catch (error1) {\n    // Safari 5.1.7, Opera 12\n    throw error1\n  }\n}\n\nfunction toLowerCase(name) {\n  return name.replace(/[A-Z]/g, function (c) {\n    return String.fromCharCode(c.charCodeAt(0) + 0x20)\n  })\n}\n\nfunction HeadersPolyfill(all) {\n  // Get headers: implemented according to mozilla's example code: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#Example\n  var map = Object.create(null)\n  var array = all.split('\\r\\n')\n  for (var i = 0; i < array.length; i += 1) {\n    var line = array[i]\n    var parts = line.split(': ')\n    var name = parts.shift()\n    var value = parts.join(': ')\n    map[toLowerCase(name)] = value\n  }\n  this._map = map\n}\nHeadersPolyfill.prototype.get = function (name) {\n  return this._map[toLowerCase(name)]\n}\n\nfunction XHRTransport() {}\n\nXHRTransport.prototype.open = function (\n  xhr,\n  onStartCallback,\n  onProgressCallback,\n  onFinishCallback,\n  url,\n  withCredentials,\n  headers\n) {\n  xhr.open('GET', url)\n  var offset = 0\n  xhr.onprogress = function () {\n    var responseText = xhr.responseText\n    var chunk = responseText.slice(offset)\n    offset += chunk.length\n    onProgressCallback(chunk)\n  }\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 2) {\n      var status = xhr.status\n      var statusText = xhr.statusText\n      var contentType = xhr.getResponseHeader('Content-Type')\n      var headers = xhr.getAllResponseHeaders()\n      onStartCallback(\n        status,\n        statusText,\n        contentType,\n        new HeadersPolyfill(headers),\n        function () {\n          xhr.abort()\n        }\n      )\n    } else if (xhr.readyState === 4) {\n      onFinishCallback()\n    }\n  }\n  xhr.withCredentials = withCredentials\n  xhr.responseType = 'text'\n  for (var name in headers) {\n    if (Object.prototype.hasOwnProperty.call(headers, name)) {\n      xhr.setRequestHeader(name, headers[name])\n    }\n  }\n  xhr.send()\n}\n\nfunction HeadersWrapper(headers) {\n  this._headers = headers\n}\nHeadersWrapper.prototype.get = function (name) {\n  return this._headers.get(name)\n}\n\nfunction FetchTransport() {}\n\nFetchTransport.prototype.open = function (\n  xhr,\n  onStartCallback,\n  onProgressCallback,\n  onFinishCallback,\n  url,\n  withCredentials,\n  headers\n) {\n  var controller = new AbortController()\n  var signal = controller.signal // see #120\n  var textDecoder = new TextDecoder()\n  fetch(url, {\n    headers: headers,\n    credentials: withCredentials ? 'include' : 'same-origin',\n    signal: signal,\n    cache: 'no-store',\n  })\n    .then(function (response) {\n      var reader = response.body.getReader()\n      onStartCallback(\n        response.status,\n        response.statusText,\n        response.headers.get('Content-Type'),\n        new HeadersWrapper(response.headers),\n        function () {\n          controller.abort()\n          reader.cancel()\n        }\n      )\n      return new Promise(function (resolve, reject) {\n        var readNextChunk = function () {\n          reader\n            .read()\n            .then(function (result) {\n              if (result.done) {\n                // Note: bytes in textDecoder are ignored\n                resolve(undefined)\n              } else {\n                var chunk = textDecoder.decode(result.value, { stream: true })\n                onProgressCallback(chunk)\n                readNextChunk()\n              }\n            })\n            ['catch'](function (error) {\n              reject(error)\n            })\n        }\n        readNextChunk()\n      })\n    })\n    .then(\n      function (result) {\n        onFinishCallback()\n        return result\n      },\n      function (error) {\n        onFinishCallback()\n        return Promise.reject(error)\n      }\n    )\n}\n\nfunction EventTarget() {\n  this._listeners = Object.create(null)\n}\n\nfunction throwError(e) {\n  setTimeout(function () {\n    throw e\n  }, 0)\n}\n\nEventTarget.prototype.dispatchEvent = function (event) {\n  event.target = this\n  var typeListeners = this._listeners[event.type]\n  if (typeListeners != undefined) {\n    var length = typeListeners.length\n    for (var i = 0; i < length; i += 1) {\n      var listener = typeListeners[i]\n      try {\n        if (typeof listener.handleEvent === 'function') {\n          listener.handleEvent(event)\n        } else {\n          listener.call(this, event)\n        }\n      } catch (e) {\n        throwError(e)\n      }\n    }\n  }\n}\nEventTarget.prototype.addEventListener = function (type, listener) {\n  type = String(type)\n  var listeners = this._listeners\n  var typeListeners = listeners[type]\n  if (typeListeners == undefined) {\n    typeListeners = []\n    listeners[type] = typeListeners\n  }\n  var found = false\n  for (var i = 0; i < typeListeners.length; i += 1) {\n    if (typeListeners[i] === listener) {\n      found = true\n    }\n  }\n  if (!found) {\n    typeListeners.push(listener)\n  }\n}\nEventTarget.prototype.removeEventListener = function (type, listener) {\n  type = String(type)\n  var listeners = this._listeners\n  var typeListeners = listeners[type]\n  if (typeListeners != undefined) {\n    var filtered = []\n    for (var i = 0; i < typeListeners.length; i += 1) {\n      if (typeListeners[i] !== listener) {\n        filtered.push(typeListeners[i])\n      }\n    }\n    if (filtered.length === 0) {\n      delete listeners[type]\n    } else {\n      listeners[type] = filtered\n    }\n  }\n}\n\nfunction Event(type) {\n  this.type = type\n  this.target = undefined\n}\n\nfunction MessageEvent(type, options) {\n  Event.call(this, type)\n  this.data = options.data\n  this.lastEventId = options.lastEventId\n}\n\nMessageEvent.prototype = Object.create(Event.prototype)\n\nfunction ConnectionEvent(type, options) {\n  Event.call(this, type)\n  this.status = options.status\n  this.statusText = options.statusText\n  this.headers = options.headers\n}\n\nConnectionEvent.prototype = Object.create(Event.prototype)\n\nvar WAITING = -1\nvar CONNECTING = 0\nvar OPEN = 1\nvar CLOSED = 2\n\nvar AFTER_CR = -1\nvar FIELD_START = 0\nvar FIELD = 1\nvar VALUE_START = 2\nvar VALUE = 3\n\nvar contentTypeRegExp = /^text\\/event\\-stream;?(\\s*charset\\=utf\\-8)?$/i\n\nvar MINIMUM_DURATION = 1000\nvar MAXIMUM_DURATION = 18000000\n\nvar parseDuration = function (value, def) {\n  var n = parseInt(value, 10)\n  if (n !== n) {\n    n = def\n  }\n  return clampDuration(n)\n}\nvar clampDuration = function (n) {\n  return Math.min(Math.max(n, MINIMUM_DURATION), MAXIMUM_DURATION)\n}\n\nvar fire = function (that, f, event) {\n  try {\n    if (typeof f === 'function') {\n      f.call(that, event)\n    }\n  } catch (e) {\n    throwError(e)\n  }\n}\n\nfunction EventSourcePolyfill(url, options) {\n  EventTarget.call(this)\n\n  this.onopen = undefined\n  this.onmessage = undefined\n  this.onerror = undefined\n\n  this.url = undefined\n  this.readyState = undefined\n  this.withCredentials = undefined\n\n  this._close = undefined\n\n  start(this, url, options)\n}\n\nvar isFetchSupported =\n  fetch != undefined && Response != undefined && 'body' in Response.prototype\n\nfunction start(es, url, options) {\n  url = String(url)\n  var withCredentials = options != undefined && Boolean(options.withCredentials)\n\n  var initialRetry = clampDuration(1000)\n  var heartbeatTimeout =\n    options != undefined && options.heartbeatTimeout != undefined\n      ? parseDuration(options.heartbeatTimeout, 45000)\n      : clampDuration(45000)\n\n  var lastEventId = ''\n  var retry = initialRetry\n  var wasActivity = false\n  var headers =\n    options != undefined && options.headers != undefined\n      ? JSON.parse(JSON.stringify(options.headers))\n      : undefined\n  var CurrentTransport =\n    options != undefined && options.Transport != undefined\n      ? options.Transport\n      : XMLHttpRequest\n  var xhr =\n    isFetchSupported &&\n    !(options != undefined && options.Transport != undefined)\n      ? undefined\n      : new XHRWrapper(new CurrentTransport())\n  var transport = xhr == undefined ? new FetchTransport() : new XHRTransport()\n  var cancelFunction = undefined\n  var timeout = 0\n  var currentState = WAITING\n  var dataBuffer = ''\n  var lastEventIdBuffer = ''\n  var eventTypeBuffer = ''\n\n  var textBuffer = ''\n  var state = FIELD_START\n  var fieldStart = 0\n  var valueStart = 0\n\n  var onStart = function (status, statusText, contentType, headers, cancel) {\n    if (currentState === CONNECTING) {\n      cancelFunction = cancel\n      if (\n        status === 200 &&\n        contentType != undefined &&\n        contentTypeRegExp.test(contentType)\n      ) {\n        currentState = OPEN\n        wasActivity = true\n        retry = initialRetry\n        es.readyState = OPEN\n        var event = new ConnectionEvent('open', {\n          status: status,\n          statusText: statusText,\n          headers: headers,\n        })\n        es.dispatchEvent(event)\n        fire(es, es.onopen, event)\n      } else {\n        var message = ''\n        if (status !== 200) {\n          if (statusText) {\n            statusText = statusText.replace(/\\s+/g, ' ')\n          }\n          message =\n            \"EventSource's response has a status \" +\n            status +\n            ' ' +\n            statusText +\n            ' that is not 200. Aborting the connection.'\n        } else {\n          message =\n            \"EventSource's response has a Content-Type specifying an unsupported type: \" +\n            (contentType == undefined\n              ? '-'\n              : contentType.replace(/\\s+/g, ' ')) +\n            '. Aborting the connection.'\n        }\n        throwError(new Error(message))\n        close()\n        var event = new ConnectionEvent('error', {\n          status: status,\n          statusText: statusText,\n          headers: headers,\n        })\n        es.dispatchEvent(event)\n        fire(es, es.onerror, event)\n      }\n    }\n  }\n\n  var onProgress = function (textChunk) {\n    if (currentState === OPEN) {\n      var n = -1\n      for (var i = 0; i < textChunk.length; i += 1) {\n        var c = textChunk.charCodeAt(i)\n        if (c === '\\n'.charCodeAt(0) || c === '\\r'.charCodeAt(0)) {\n          n = i\n        }\n      }\n      var chunk = (n !== -1 ? textBuffer : '') + textChunk.slice(0, n + 1)\n      textBuffer = (n === -1 ? textBuffer : '') + textChunk.slice(n + 1)\n      if (chunk !== '') {\n        wasActivity = true\n      }\n      for (var position = 0; position < chunk.length; position += 1) {\n        var c = chunk.charCodeAt(position)\n        if (state === AFTER_CR && c === '\\n'.charCodeAt(0)) {\n          state = FIELD_START\n        } else {\n          if (state === AFTER_CR) {\n            state = FIELD_START\n          }\n          if (c === '\\r'.charCodeAt(0) || c === '\\n'.charCodeAt(0)) {\n            if (state !== FIELD_START) {\n              if (state === FIELD) {\n                valueStart = position + 1\n              }\n              var field = chunk.slice(fieldStart, valueStart - 1)\n              var value = chunk.slice(\n                valueStart +\n                  (valueStart < position &&\n                  chunk.charCodeAt(valueStart) === ' '.charCodeAt(0)\n                    ? 1\n                    : 0),\n                position\n              )\n              if (field === 'data') {\n                dataBuffer += '\\n'\n                dataBuffer += value\n              } else if (field === 'id') {\n                lastEventIdBuffer = value\n              } else if (field === 'event') {\n                eventTypeBuffer = value\n              } else if (field === 'retry') {\n                initialRetry = parseDuration(value, initialRetry)\n                retry = initialRetry\n              } else if (field === 'heartbeatTimeout') {\n                heartbeatTimeout = parseDuration(value, heartbeatTimeout)\n                if (timeout !== 0) {\n                  clearTimeout(timeout)\n                  timeout = setTimeout(function () {\n                    onTimeout()\n                  }, heartbeatTimeout)\n                }\n              }\n            }\n            if (state === FIELD_START) {\n              if (dataBuffer !== '') {\n                lastEventId = lastEventIdBuffer\n                if (eventTypeBuffer === '') {\n                  eventTypeBuffer = 'message'\n                }\n                var event = new MessageEvent(eventTypeBuffer, {\n                  data: dataBuffer.slice(1),\n                  lastEventId: lastEventIdBuffer,\n                })\n                es.dispatchEvent(event)\n                if (eventTypeBuffer === 'message') {\n                  fire(es, es.onmessage, event)\n                }\n                if (currentState === CLOSED) {\n                  return\n                }\n              }\n              dataBuffer = ''\n              eventTypeBuffer = ''\n            }\n            state = c === '\\r'.charCodeAt(0) ? AFTER_CR : FIELD_START\n          } else {\n            if (state === FIELD_START) {\n              fieldStart = position\n              state = FIELD\n            }\n            if (state === FIELD) {\n              if (c === ':'.charCodeAt(0)) {\n                valueStart = position + 1\n                state = VALUE_START\n              }\n            } else if (state === VALUE_START) {\n              state = VALUE\n            }\n          }\n        }\n      }\n    }\n  }\n\n  var onFinish = function () {\n    if (currentState === OPEN || currentState === CONNECTING) {\n      currentState = WAITING\n      if (timeout !== 0) {\n        clearTimeout(timeout)\n        timeout = 0\n      }\n      timeout = setTimeout(function () {\n        onTimeout()\n      }, retry)\n      retry = clampDuration(Math.min(initialRetry * 16, retry * 2))\n\n      es.readyState = CONNECTING\n      var event = new Event('error')\n      es.dispatchEvent(event)\n      fire(es, es.onerror, event)\n    }\n  }\n\n  var close = function () {\n    currentState = CLOSED\n    if (cancelFunction != undefined) {\n      cancelFunction()\n      cancelFunction = undefined\n    }\n    if (timeout !== 0) {\n      clearTimeout(timeout)\n      timeout = 0\n    }\n    es.readyState = CLOSED\n  }\n\n  var onTimeout = function () {\n    timeout = 0\n\n    if (currentState !== WAITING) {\n      if (!wasActivity && cancelFunction != undefined) {\n        throwError(\n          new Error(\n            'No activity within ' +\n              heartbeatTimeout +\n              ' milliseconds. Reconnecting.'\n          )\n        )\n        cancelFunction()\n        cancelFunction = undefined\n      } else {\n        wasActivity = false\n        timeout = setTimeout(function () {\n          onTimeout()\n        }, heartbeatTimeout)\n      }\n      return\n    }\n\n    wasActivity = false\n    timeout = setTimeout(function () {\n      onTimeout()\n    }, heartbeatTimeout)\n\n    currentState = CONNECTING\n    dataBuffer = ''\n    eventTypeBuffer = ''\n    lastEventIdBuffer = lastEventId\n    textBuffer = ''\n    fieldStart = 0\n    valueStart = 0\n    state = FIELD_START\n\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=428916\n    // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.\n    var requestURL = url\n    if (url.slice(0, 5) !== 'data:' && url.slice(0, 5) !== 'blob:') {\n      if (lastEventId !== '') {\n        requestURL +=\n          (url.indexOf('?') === -1 ? '?' : '&') +\n          'lastEventId=' +\n          encodeURIComponent(lastEventId)\n      }\n    }\n    var requestHeaders = {}\n    requestHeaders['Accept'] = 'text/event-stream'\n    if (headers != undefined) {\n      for (var name in headers) {\n        if (Object.prototype.hasOwnProperty.call(headers, name)) {\n          requestHeaders[name] = headers[name]\n        }\n      }\n    }\n    try {\n      transport.open(\n        xhr,\n        onStart,\n        onProgress,\n        onFinish,\n        requestURL,\n        withCredentials,\n        requestHeaders\n      )\n    } catch (error) {\n      close()\n      throw error\n    }\n  }\n\n  es.url = url\n  es.readyState = CONNECTING\n  es.withCredentials = withCredentials\n  es._close = close\n\n  onTimeout()\n}\n\nEventSourcePolyfill.prototype = Object.create(EventTarget.prototype)\nEventSourcePolyfill.prototype.CONNECTING = CONNECTING\nEventSourcePolyfill.prototype.OPEN = OPEN\nEventSourcePolyfill.prototype.CLOSED = CLOSED\nEventSourcePolyfill.prototype.close = function () {\n  this._close()\n}\n\nEventSourcePolyfill.CONNECTING = CONNECTING\nEventSourcePolyfill.OPEN = OPEN\nEventSourcePolyfill.CLOSED = CLOSED\nEventSourcePolyfill.prototype.withCredentials = undefined\n\nexport default EventSourcePolyfill\n"]},"metadata":{},"sourceType":"script"}